from create_bot import dp, bot, db
from db import Database
from aiogram import types, Dispatcher
from states import FSMWelcome
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards import welcome_btn as btn
from keyboards import menu_btn as main
import config as con


#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------

# @dp.message_handler(commands = ['start'], state = None)
async def start(message: types.Message):
    if message.chat.type == 'private':
        if(not db.user_exists(message.from_user.id)):
            db.add_user(message.from_user.id)
            await FSMWelcome.surname.set()
            await message.answer(" –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º –∫ –ª—É—á—à–∏–º –≤—Ä–∞—á–∞–º —Å—Ç—Ä–∞–Ω—ã")
            await bot.send_message(message.from_user.id, '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:')
            await message.reply('–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')
        else:
            await message.answer(" –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º –∫ –ª—É—á—à–∏–º –≤—Ä–∞—á–∞–º —Å—Ç—Ä–∞–Ω—ã")
            await message.answer(" –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", reply_markup=main.main_menu)

    else:
        await bot.send_message(message.from_user.id, '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö!')

#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------

# @dp.callback_query_handler(text='edit_questionnaire')
async def edit_questionnaire(callback_query: types.CallbackQuery):
    await FSMWelcome.surname.set()
    await bot.send_message(callback_query.from_user.id, '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:')
    await bot.send_message(callback_query.from_user.id, '–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')
#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------

# @dp.message_handler(state=FSMWelcome.name)
async def load_surname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        db.set_surname(message.from_user.id, message.text)
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –∏–º—è')
        await FSMWelcome.next()

#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------

# @dp.message_handler(state=FSMWelcome.name)
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        db.set_name(message.from_user.id, message.text)
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ')
        await FSMWelcome.next()

#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------

# @dp.message_handler(state=FSMWelcome.name)
async def load_middlename(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        db.set_middlename(message.from_user.id, message.text)
        await message.answer('–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?')
        await FSMWelcome.next()

#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------

# @dp.message_handler(state=FSMWelcome.age)
async def load_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        age = (message.text) if message.text.isdigit() else None
        if age is not None:
            if int(age) < 0 or int(age) > 120:
                await bot.send_message(message.from_user.id, text = "–ë—ã–ª —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç '0'.")
                age = "0"
                data['age'] = age
            elif len(age) > 2:
                await bot.send_message(message.from_user.id, text = "–ë—ã–ª —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç '0'.")
                age = "0"
                data['age'] = age
            else:
                data['age'] = age

        db.set_age(message.from_user.id, data['age'])
        await message.answer('üöª –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª:', reply_markup=btn.walcome_gender)
        await FSMWelcome.next()

#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------

# @dp.callback_query_handler(text='man', state=FSMWelcome.gender)
async def load_gender_man(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        db.set_gender(callback_query.from_user.id, 'üë®–ú—É–∂—á–∏–Ω–∞')
        await bot.send_message(callback_query.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: 89999999999)')
        await FSMWelcome.next()

#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------

# @dp.callback_query_handler(text='woman', state=FSMWelcome.gender)
async def load_gender_woman(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        db.set_gender(callback_query.from_user.id, 'üë©–ñ–µ–Ω—â–∏–Ω–∞')
        await bot.send_message(callback_query.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: 89999999999)')
        await FSMWelcome.next()

#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------

# @dp.callback_query_handler(text='woman', state=FSMWelcome.gender)
async def load_phonenumber(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        db.set_phone_number(message.from_user.id, message.text)
        await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –°–ù–ò–õ–°–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: 111-222-333-44)')
        await FSMWelcome.next()

#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------

# @dp.callback_query_handler(text='woman', state=FSMWelcome.gender)
async def load_snils(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        db.set_snils(message.from_user.id, message.text)
        await bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, —É–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!', reply_markup=main.main_menu)
        await state.finish()


#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------




def register_handlers_welcome(dp: Dispatcher):
    dp.register_message_handler(start, commands = ['start'], state = None)
    dp.register_callback_query_handler(edit_questionnaire, text='edit_questionnaire')
    dp.register_message_handler(load_surname, state=FSMWelcome.surname)
    dp.register_message_handler(load_name, state=FSMWelcome.name)
    dp.register_message_handler(load_middlename, state=FSMWelcome.middlename)
    dp.register_message_handler(load_age, state=FSMWelcome.age)
    dp.register_callback_query_handler(load_gender_man, text='man', state=FSMWelcome.gender)
    dp.register_callback_query_handler(load_gender_woman, text='woman', state=FSMWelcome.gender)
    dp.register_message_handler(load_phonenumber, state=FSMWelcome.phonenumber)
    dp.register_message_handler(load_snils, state=FSMWelcome.snils)