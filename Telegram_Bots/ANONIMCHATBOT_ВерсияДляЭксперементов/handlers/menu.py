from create_bot import dp, bot, db, check_sub_channels
from keyboards import menu_btn as nav
from keyboards import client_btn as navs
import config as con
from aiogram import types, Dispatcher
from states import FCMPromo
from aiogram.dispatcher import FSMContext

# #----------------------------------------------------------------------------------------------------------------

# @dp.message_handler(lambda message: message.text == "–ú–∞–≥–∞–∑–∏–Ωüõç")
async def back_main(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	if(not db.get_block(callback_query.from_user.id)):

		await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

		await bot.send_message(callback_query.from_user.id, '–ú–µ–Ω—éüè†', reply_markup=navs.find_partner)

	else:
		await bot.send_message(callback_query.from_user.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")

# #----------------------------------------------------------------------------------------------------------------

# #----------------------------------------------------------------------------------------------------------------

# @dp.message_handler(lambda message: message.text == "–ú–∞–≥–∞–∑–∏–Ωüõç")
async def shop(message: types.Message):
	if(not db.get_block(message.from_user.id)):

		await bot.send_message(message.from_user.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', reply_markup=nav.back_main)

	else:
		await bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")

# #----------------------------------------------------------------------------------------------------------------



# @dp.callback_query_handler(text='achievements')
async def achievements(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	if db.get_block(callback_query.from_user.id) == 0:

		await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

		await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=nav.achievements)

	else:
	    await bot.send_message(callback_query.from_user.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")

# #----------------------------------------------------------------------------------------------------------------
# #----------------------------------------------------------------------------------------------------------------

# @dp.callback_query_handler(text='quantity_messages')
async def quantity_messages(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	if db.get_block(callback_query.from_user.id) == 0:

		await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

		messages = int(db.get_messages(callback_query.from_user.id))

		if messages >= 100:
			# –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
			scores = int(db.get_scores(callback_query.from_user.id))
			scores += 50
			db.set_scores(callback_query.from_user.id, scores)
			await bot.send_message(callback_query.from_user.id, f"–¢—ã –ø–æ–ª—É—á–∏–ª 50 –±–∞–ª–ª–æ–≤ –∑–∞ 100 —Å–æ–æ–±—â–µ–Ω–∏–π! \n–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {db.get_scores(callback_query.from_user.id)} –±–∞–ª–ª–æ–≤.", reply_markup=nav.achievements)
			messages -= 100
			db.set_messages(callback_query.from_user.id, messages)
		else:
			messages_to_add = 100 - (messages % 100)
			await bot.send_message(callback_query.from_user.id, f"–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {messages_to_add} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤. \n–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {db.get_scores(callback_query.from_user.id)} –±–∞–ª–ª–æ–≤.", reply_markup=nav.achievements)

	else:
	    await bot.send_message(callback_query.from_user.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")

# #----------------------------------------------------------------------------------------------------------------
# #----------------------------------------------------------------------------------------------------------------

# @dp.callback_query_handler(text='promo_code')
async def promo(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	if db.get_block(callback_query.from_user.id) == 0:

		await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

		await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥')
		await FCMPromo.code.set()

	else:
	    await bot.send_message(callback_query.from_user.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")

# #----------------------------------------------------------------------------------------------------------------

# @dp.message_handler(state=FCMPromo.code)
async def promo_code(message: types.Message, state: FSMContext):
    if db.get_block(message.from_user.id) == 0:
        code = message.text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π
        if db.existence_promo(code):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ
            user_id = message.from_user.id

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ
            if db.check_used_promo(user_id, code):
                await message.reply("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ.", reply_markup=nav.achievements)
            else:
                # –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                db.add_used_promo(user_id, code)

                # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
                promo_points = db.get_promo_points(code)

                # –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                scores = int(db.get_scores(user_id))
                scores += promo_points
                db.set_scores(user_id, scores)

                # –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π –Ω–∞ 1
                db.minus_usage_promo(code)  # –ü–µ—Ä–µ–¥–∞–π—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞

                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–∞—Ö
                await bot.send_message(user_id, '–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!')
                await bot.send_message(user_id, f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {promo_points} –±–∞–ª–ª–æ–≤ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞. "
                                               f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {db.get_scores(user_id)} –±–∞–ª–ª–æ–≤.",
                                      reply_markup=nav.achievements)
        else:
            await message.reply("–î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω–æ.", reply_markup=nav.achievements)

        await state.finish()
    else:
        await bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
        await state.finish()

#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------



# # # @dp.callback_query_handler(text='questionnaire')
# # async def questionnaire(callback_query: types.CallbackQuery):
# # 	if db.get_block(callback_query.from_user.id) == 0:

# # 		await bot.answer_callback_query(callback_query.id)
# # 		await bot.send_message(callback_query.from_user.id, f"""–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:
# # 			–ò–º—è: {db.get_name(callback_query.from_user.id)}
# # 			–í–æ–∑—Ä–∞—Å—Ç: {db.get_age(callback_query.from_user.id)}
# # 			–¢–µ–∫—Å—Ç: {db.get_text(callback_query.from_user.id)}
# # 			–ü–æ–ª: {db.get_gender(callback_query.from_user.id)}
# # 			–†–µ–π—Ç–∏–Ω–≥:
# # 			–õ–∞–π–∫–∏üëç: {db.get_like(callback_query.from_user.id)}
# # 			–î–∏–∑–ª–∞–π–∫–∏üëé: {db.get_dislike(callback_query.from_user.id)}
# # 			–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤: {db.get_num_chats(callback_query.from_user.id)}
# # 			""", reply_markup = nav.questionnaire)
# # 	else:
# # 		await bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")

# #----------------------------------------------------------------------------------------------------------------

# # @dp.callback_query_handler(text='edit_questionnaire')
# async def edit_questionnaire(callback_query: types.CallbackQuery):
# 	if db.get_block(callback_query.from_user.id) == 0:
# 		await FSMWelcome.name.set()
# 		await bot.send_message(callback_query.from_user.id, '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç–∫–∏:')
# 		await bot.send_message(callback_query.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
# 	else:
# 		await bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
# # @dp.message_handler(state=FSMWelcome.name)
# async def load_name(message: types.Message, state: FSMContext):
# 	async with state.proxy() as data:
# 		data['name'] = message.text
# 		db.set_name(message.from_user.id, message.text)
# 		await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç')
# 		await FSMWelcome.next()

# # @dp.message_handler(state=FSMWelcome.age)
# async def load_age(message: types.Message, state: FSMContext):
# 	async with state.proxy() as data:
# 		data['age'] = message.text
# 		db.set_age(message.from_user.id, message.text)
# 		await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –ª—é–¥–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –±—É–¥–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è')
# 		await FSMWelcome.next()


# # @dp.message_handler(state=FSMWelcome.text)
# async def load_text(message: types.Message, state: FSMContext):
# 	async with state.proxy() as data:
# 		data['text'] = message.text
# 		db.set_text(message.from_user.id, message.text)
# 		await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª', reply_markup=btn.walcome_markup)
# 		await FSMWelcome.next()

# # @dp.callback_query_handler(text='man', state=FSMWelcome.gender)
# async def load_gender_man(callback_query: types.CallbackQuery, state: FSMContext):
# 	async with state.proxy() as data:
# 		data['gender'] = '–ú—É–∂—á–∏–Ω–∞'
# 		db.set_gender(callback_query.from_user.id, data['gender'])
# 		await bot.send_message(callback_query.from_user.id, '–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —É–¥–∞—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!', reply_markup=nav.find_partner)
# 		await state.finish()

# # @dp.callback_query_handler(text='woman', state=FSMWelcome.gender)
# async def load_gender_woman(callback_query: types.CallbackQuery, state: FSMContext):
# 	async with state.proxy() as data:
# 		data['gender'] = '–ñ–µ–Ω—â–∏–Ω–∞'
# 		db.set_gender(callback_query.from_user.id, data['gender'])
# 		await bot.send_message(callback_query.from_user.id, '–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —É–¥–∞—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!', reply_markup=nav.find_partner)
# 		await state.finish()



# #----------------------------------------------------------------------------------------------------------------

#–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
def register_handlers_menu(dp: Dispatcher):
	dp.register_callback_query_handler(back_main, text='back_main')
	dp.register_message_handler(shop, lambda message: message.text == "–ú–∞–≥–∞–∑–∏–Ωüõç")
	dp.register_callback_query_handler(achievements, text='achievements')
	dp.register_callback_query_handler(quantity_messages, text='quantity_messages')
	dp.register_callback_query_handler(promo, text='promo_code')
	dp.register_message_handler(promo_code, state=FCMPromo.code)
	# dp.register_callback_query_handler(questionnaire, text='questionnaire')
	# dp.register_callback_query_handler(edit_questionnaire, text='edit_questionnaire')
	# dp.register_message_handler(load_name, state=FSMWelcome.name)
	# dp.register_message_handler(load_age, state=FSMWelcome.age)
	# dp.register_message_handler(load_text, state=FSMWelcome.text)
	# dp.register_callback_query_handler(load_gender_man, text='man', state=FSMWelcome.gender)
	# dp.register_callback_query_handler(load_gender_woman, text='woman', state=FSMWelcome.gender)